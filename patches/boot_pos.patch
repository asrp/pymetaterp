diff --git pymetaterp/boot_stackless.py pymetaterp/boot_stackless.py
index 55ce028..cb9470c 100644
--- pymetaterp/boot_stackless.py
+++ pymetaterp/boot_stackless.py
@@ -57,12 +57,15 @@ class Interpreter:
         self.input = [input, pos]
         self.stack = [Frame(root, self.input)]
         output = self.new_step()
+        self.memoizer = {}
         while True:
             if output is Eval:
                 root = self.stack[-1].calls[len(self.stack[-1].outputs)]
                 self.stack.append(Frame(root, self.input))
                 output = self.new_step()
             else:
+                if type(output) == Node:
+                    output.pos = (self.stack[-1].input[1]+1, self.input[1]+1)
                 self.stack.pop()
                 if not self.stack:
                     return output
@@ -83,6 +86,11 @@ class Interpreter:
             # print " "*len(self.stack), "matching", name, root[NAME], self.input[1], self.input[0][self.input[1]+1:self.input[1]+11]
             if root[NAME] == "anything":
                 return pop(self.input)
+            key = (root[NAME], id(self.input[0]), self.input[1])
+            if key in self.memoizer:
+                self.input = self.memoizer[key][1][:]
+                return self.memoizer[key][0]
+            self.stack[-1].key = key
             calls.append(self.rules[root[NAME]][BODY])
         elif name in ["exactly", "token"]:
             if name == "token":
@@ -145,9 +153,11 @@ class Interpreter:
             make_node = "!" in self.rules[root[NAME]][FLAGS] or\
                         (and_node and len(output) > 1)
             #print len(self.stack)*" ", "returned", output
-            if not make_node:
-                return output
-            return Node(root[NAME], to_list(output))
+            if make_node:
+                output = Node(root[NAME], to_list(output))
+            self.memoizer[frame.key] = (output, self.input[:])
+            return output
+
         elif name in "bound":
             return Node(root[1][0], to_list(output))
         elif name == "negation":
